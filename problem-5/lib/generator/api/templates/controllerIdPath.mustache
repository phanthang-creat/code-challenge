// types
import type { Application } from "express";
import type { Resource } from "express-automatic-routes";
import type { Req, Res } from "@interfaces/IApi";
import type { ActionCreationAttributes } from "@models/action";

import { {{ modelUpperCase }} } from "@models/{{{ model }}}";
import { {{ modelUpperCase }}Provider } from "@providers/{{{ module }}}";
import { ActionProvider } from "@providers/system-management/action";
import { authorization } from "@middlewares/auth";
import { validateId } from "@middlewares/validator";
import { errorHandler } from "@services/helpers";

export default (_express: Application) => {
  const {{ modelLowerCase }}Provider = new {{ modelUpperCase }}Provider();
	const actionProvider = new ActionProvider();
  return <Resource>{
		middleware: [validateId()],
    get: {
      middleware: [],
      handler: async (req: Req, res: Res) => {
        /**
         * @openapi
         * /{{{ apiPathLink }}}/{id}:
         *   get:
         *     operationId: get{{ operation }}Id
         *     tags: [{{ swaggerTag }}]
         *     description: Get
         *     parameters:
         *      - in: path
         *        name: id
         *        required: true
         *        type: string
         *     security:
         *       - Bearer: []
         *     responses:
         *       200:
         *         description: Success
         *         content:
         *           application/json:
         *            schema:
         *              allOf:
         *                - $ref: '#/components/schemas/Response'
         *                - type: object
         *                  properties:
         *                    responseData:
         *                        $ref: "#/components/schemas/{{ modelUpperCase }}"
         *
         */

        await get{{ modelUpperCase }}ById(req, res);
      },
    },

    put: {
      middleware: [authorization()],
      handler: async (req: Req, res: Res) => {
        /**
         * @openapi
         * /{{{ apiPathLink }}}/{id}:
         *   put:
         *     operationId: put{{ operation }}Id
         *     tags: [{{ swaggerTag }}]
         *     description: Put
         *     security:
         *       - Bearer: []
         *     parameters:
         *      - in: path
         *        name: id
         *        required: true
         *        type: string
         *     requestBody:
         *       content:
         *        application/json:
         *          schema:
         *           $ref: "#/components/schemas/{{ modelUpperCase }}Mutate"
         *     responses:
         *       200:
         *         description: Success
         *         content:
         *           application/json:
         *            schema:
         *              allOf:
         *                - $ref: '#/components/schemas/Response'
         *                - type: object
         *                  properties:
         *                    responseData:
         *                        $ref: "#/components/schemas/{{ modelUpperCase }}"
         *
         */
        await put{{ modelUpperCase }}ById(req, res);
      },
    },

    delete: {
      middleware: [authorization()],
      handler: async (req: Req, res: Res) => {
        /**
         * @openapi
         * /{{{ apiPathLink }}}/{id}:
         *   delete:
         *     operationId: delete{{ operation }}Id
         *     tags: [{{ swaggerTag }}]
         *     description: Delete
         *     security:
         *       - Bearer: []
         *     parameters:
         *      - in: path
         *        name: id
         *        required: true
         *        type: string
         *     responses:
         *       200:
         *         description: Success
         *         content:
         *           application/json:
         *            schema:
         *              allOf:
         *                - $ref: '#/components/schemas/Response'
         *                - type: object
         *                  properties:
         *                    responseData:
         *                        $ref: "#/components/schemas/{{ modelUpperCase }}"
         *
         */
        await delete{{ modelUpperCase }}ById(req, res);
      },
    },
  };

  async function get{{ modelUpperCase }}ById(req: Req, res: Res): Promise<void> {
    try {
      const data = await {{ modelLowerCase }}Provider.getById({
        id: req.params.id,
      });
      return res.sendOk({ data });
    } catch (error) {
      return res.sendError({ err: error });
    }
  }

  async function put{{ modelUpperCase }}ById(req: Req, res: Res): Promise<void> {
     const history = {
				initiator_id: req.user.id,
        type: "UPDATE",
        category: "{{ modelUpperCase }}".toUpperCase(),
        description: {
          vi: "Chỉnh sửa {{ modelLowerCase }}",
          en: "Edit {{ modelLowerCase }}",
        },
				created_at: new Date(),
      } as ActionCreationAttributes;
    try {
      const data = await {{ modelLowerCase }}Provider.put(
        req.params.id,
        {
          ...req.body,
          updated_at: new Date(),
          updated_by: req.user.id,
        }
      );
      history.is_success = true
      res.sendOk({ data });
    } catch (error) {
      history.is_success = false
      res.sendError({ err: error });
    }
    await actionProvider.post(history).catch(async (err) => await errorHandler(err, "{{ modelUpperCase }}", history))
    return
  }

  async function delete{{ modelUpperCase }}ById(req: Req, res: Res): Promise<void> {
     const history = {
				initiator_id: req.user.id,
        type: "DELETE",
        category: "{{ modelUpperCase }}".toUpperCase(),
        description: {
          vi: "Xoá nhiều {{ modelLowerCase }}",
          en: "Delete {{ modelLowerCase }}",
        },
				created_at: new Date(),
      } as ActionCreationAttributes;
    try {
      const data = await {{ modelLowerCase }}Provider.delete(req.params.id);
    history.is_success = true
      res.sendOk({ data });
    } catch (error) {
      history.is_success = false
      res.sendError({ err: error });
    }
    await actionProvider.post(history).catch(async (err) => await errorHandler(err, "{{ modelUpperCase }}", history))
    return
  }
};
