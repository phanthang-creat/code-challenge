import { ForeignKeyConstraintError, UniqueConstraintError } from "sequelize";
import ValidationError from "sequelize/lib/errors/validation-error";
import { DatabaseErrorAdditionalData } from "../handler/database-error-handler";

export const dataErrorMessagesHandler = (error: unknown, additionalData?: DatabaseErrorAdditionalData) => {
	if (error instanceof ValidationError) {
		if (error instanceof UniqueConstraintError) {
			console.log("üöÄ ~ dataErrorMessagesHandler ~ additionalData:", additionalData);
			if (additionalData?.errorFields) {
				return {
					en: `Field ${additionalData.errorFields.join(", ")} already exists`,
					vi: `Tr∆∞·ªùng ${additionalData.errorFields.join(", ")} ƒë√£ t·ªìn t·∫°i`,
				};
			}

			return {
				en: "Unique constraint error",
				vi: "L·ªói r√†ng bu·ªôc duy nh·∫•t",
			};
		}

		return {
			en: "Database validation error",
			vi: "L·ªói ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu",
		};
	}

	if (error instanceof ForeignKeyConstraintError) {
		if (additionalData?.errorFields) {
			return {
				en: `Foreign key constraint error on ${additionalData.errorFields.length > 1 ? "fields" : "field"} ${additionalData.errorFields.join(", ")}`,
				vi: `L·ªói r√†ng bu·ªôc kh√≥a ngo·∫°i tr√™n tr∆∞·ªùng ${additionalData.errorFields.join(", ")}`,
			};
		} else {
			return {
				en: "Foreign key constraint error",
				vi: "L·ªói r√†ng bu·ªôc kh√≥a ngo·∫°i",
			};
		}
	}

	return {
		en: "Database error",
		vi: "L·ªói c∆° s·ªü d·ªØ li·ªáu",
	};
};
